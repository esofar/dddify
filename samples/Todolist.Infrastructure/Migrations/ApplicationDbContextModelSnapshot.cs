// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Todolist.Infrastructure.Repositories;

#nullable disable

namespace Todolist.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Todolist.Domain.Entities.TodoList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TodoList", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec"),
                            IsDeleted = false,
                            Title = "Todo List"
                        });
                });

            modelBuilder.Entity("Todolist.Domain.Entities.TodoListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TodoListId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TodoListId");

                    b.ToTable("TodoListItem", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("08daa6de-fabb-4e57-86e0-386a66fe8ae7"),
                            IsDeleted = false,
                            Note = "Make a todo list 📃",
                            Order = 1,
                            Priority = "Low",
                            TodoListId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec")
                        },
                        new
                        {
                            Id = new Guid("08daa6df-0599-4227-8e79-ac83b22305f3"),
                            IsDeleted = false,
                            Note = "Check off the first item ✅",
                            Order = 2,
                            Priority = "Medium",
                            TodoListId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec")
                        },
                        new
                        {
                            Id = new Guid("08daa6df-1457-4ff3-8080-a57e71d0d80c"),
                            IsDeleted = false,
                            Note = "Realise you've already done two things on the list! 🤯",
                            Order = 3,
                            Priority = "High",
                            TodoListId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec")
                        },
                        new
                        {
                            Id = new Guid("08daf207-8abf-4fff-830f-93e48ed9a34c"),
                            IsDeleted = false,
                            Note = "Reward yourself with a nice, long nap 🏆",
                            Order = 4,
                            Priority = "None",
                            TodoListId = new Guid("08daa6de-c742-4197-8fdc-eb883ba3b4ec")
                        });
                });

            modelBuilder.Entity("Todolist.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("Todolist.Domain.Entities.TodoListColour", "Colour", b1 =>
                        {
                            b1.Property<Guid>("TodoListId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Code")
                                .HasMaxLength(20)
                                .HasColumnType("TEXT");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoList");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("Todolist.Domain.Entities.TodoListItem", b =>
                {
                    b.HasOne("Todolist.Domain.Entities.TodoList", "TodoList")
                        .WithMany("Items")
                        .HasForeignKey("TodoListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoList");
                });

            modelBuilder.Entity("Todolist.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
